#+TITLE: ML for the Working Programmer

* Why SML?
For me, it is due to learning Isabelle more effectively; and also as I'm doing
SICP, the functional programming style would works for good.
* Resources
- [[https://www.cl.cam.ac.uk/~lp15/MLbook/pub-details.html][Text book (freely distributed in online)]]
* Study Note
** Chapter 2
*** Naming constants
We can name value by declaring with ML keywords ~val~
#+BEGIN_SRC sml
val seconds = 60;
#+END_SRC

#+RESULTS:
: val seconds = 60 : int
: END

Note that we have to begin with ~val~ and end with semicolon ~;~.
All the ML statement should end with ~;~ like above--similar to java.

For now, we can treat ML as calculator:
#+BEGIN_SRC sml
val pi = 3.14159;
val r = 2.0;
val area = pi * r * r;
#+END_SRC

#+RESULTS:
: val pi = 3.14159 : real
: val r = 2.0 : real
: val area = 12.56636 : real
: END

*** Declaring functions
we can capture the [[Naming constants][previous]] calculation as function:
#+BEGIN_SRC sml
fun area(r) = pi*r*r;
#+END_SRC

#+RESULTS:
: val area = fn : real -> real
: END

Then we can call it with argument:
#+BEGIN_SRC sml
area(2.0);
#+END_SRC

#+RESULTS:
: val it = 12.56636 : real
: END

The parentheses around the argument are optional:
#+BEGIN_SRC sml
area 1.0;
#+END_SRC

#+RESULTS:
: val it = 3.14159 : real
: END

It is also true when we declare the function:
#+BEGIN_SRC sml
fun area r = pi*r*r;
#+END_SRC

#+RESULTS:
: val area = fn : real -> real
: END

**** Comments
The comment's syntax in Standard ML begins with ~(*~ and ends with ~*)~, which
is same as Isabelle--Isabelle inherite this from SML more correctly.

It is important to put some comments for clarity of one's purpose (for that
purpose I've started literal programming in org mode like this.):
#+BEGIN_SRC sml
fun area r = (* area of circle with radius r *)
    pi*r*r;
#+END_SRC

Yeah, it looks silly to comment like this simple function; but when we make
a lot of abstract layers, it comes as big help.

*** Identifiers
It is allowed to use /symbolic names/ as identifies:
| symbolic names | ~! % & $ # + - * / : < = > ? @ \ ~ ` ^ *~ \vert |

So it is valid expression in ML:
#+BEGIN_SRC sml
val +-+ = 1415;
#+END_SRC

#+RESULTS:
: val +-+ = 1415 : int
: END

**** Exercise 2.1

For starting an ML session, use the command ~run-sml~.
#+BEGIN_SRC sml
use "exercise2_1.sml";
#+END_SRC
To terminate the REPL session, type ~<C-d>~,i.e. end of file.

*** Arithmetic
**** Integers
To type the negative integer, prepend the tilde to the digit:
#+BEGIN_SRC sml
~23
#+END_SRC

Integer operations are infix with conventional precedences, whereas scheme
(lisp) has prefix so that it doesn't need the concept of precedences.

**** Real numbers
A real constant contains ~E~ notation: ~E~ /n/ means times the /n/ th power of 10.
/n/ can be negative integer:
~123.4E~2~ denotes 1.234.

Note that function application binds more tightly than infix operators:
~area a + b~ is equivalent to ~(area a) + b~ not ~area (a + b)~.

**** Exercise 2.2
As ML is strictly typed language when we consider the real and integer numbers
as one unit, namely number, then we have some problems:
- We can not have integer division because we think integer as real number.
- We can not have remiander function; if it is, then it should work also to real
  numbers, which is certainly not what we wanted.


On the other hand, Lisp has dynamically typed language--weakly typed, it can
have the integer division and remainder procedures, which is specific to integer
numbers; basically Lisp also differentiate the real number and integer number
under the hood. So, it is not fair to say "ML should simply provide numbers, as
Lisp does \cdots "
**** Exercise 2.3
Let's do some experiment:
#+BEGIN_SRC sml
2 * 1.2
#+END_SRC

#+RESULTS:
:

which raises error says "Error: operator and operand do not agree [overload conflict]"

We can conclude from this that the integer number does not coerced to real number
automatically. So the ~fun double(n) = 2*n;~ doesn't need to specify the type
constraints because the ~2~ cast that ~n~ should be int unless it raises error
like above.

Second experiment:
#+BEGIN_SRC sml
Math.sin(1)
#+END_SRC

#+RESULTS:
: stdIn:1.2-5.4 Error: operator and operand do not agree [overload conflict]
: operator domain: real
: operand:         [int ty]
: in expression:
: Math.sin 1

which raises "Error: operator and operand do not agree [overload conflict]".

So we can deduce from this that ~Math.sin~ expect to take real as its argument's type.
As consequence, ~fun f~ also need not to be constrained.

On the other hands, the last one need to be constrained; ML can not deduce the
type of argument as ~*~ is overloaded function,i.e. it can be used with integer
as real as well.
*** Strings and characters
**** Exercise 2.4
- First version of function digit:
  #+BEGIN_SRC sml
fun digit i = chr(i + ord #"0");
  #+END_SRC

  #+RESULTS:
  : val digit = fn : int -> char
  : END

- Second version of function digit:
  #+BEGIN_SRC sml
fun digit i = String.sub("0123456789", i);
  #+END_SRC

  #+RESULTS:
  : [autoloading]
  : [library $SMLNJ-BASIS/basis.cm is stable]
  : [library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
  : [autoloading done]
  : val digit = fn : int -> char
  : END


I expect when we call the ~digit ~1~ in the second version of it, it should
returns error that says "invalid index" or something like that or it could
return "9" like python; but the function call of ~digit 10~ should raise invalid
index error without another choice.

On the other hand, the former may not raise error in ~digit 10~ call because it
obviously ranges in ASCII character set; but the other one should raise error as
I think the ASCII character set doesn't accept the negative character code.

So, let's check:
#+BEGIN_SRC sml
digit ~1;
digit 10;
#+END_SRC

#+RESULTS:
:
: uncaught exception Subscript [subscript out of bounds]
: raised at: stdIn:10.15-10.25

Uh-oh, the function call ~digit ~1~ of first version did not raise the error it
returns ~/~ ; it turns out accept negative integer as its code! Interesting.
And as expected the ~digit 10~ returns ~:~ not error.

How about the second one?; which raises error says "uncaught exception Subscript [subscript out of bounds]
" in both case as expected. Not like python huh.

*** Truth values and conditional expressions
**** Exercise 2.5
#+BEGIN_SRC sml
(m = "January" orelse m = "March" orelse m = "May" orelse m = "July" orelse m = "September" orelse m = "Nobember")
 andalso (0 < d andalso d < 32) orelse
 (m = "April" orelse m = "June" orelse m = "August" orelse m = "October" orelse m = "December") andalso
 (0 < d andalso d < 31) orelse (m = "February" andalso (0 < d andalso d < 29))
#+END_SRC

#+RESULTS:
: val it = true : bool
: END

*** Functions with multiple arguments and results
**** Exercise 2.6
To name it easily we use the abbreviation ~mytime~ as tuple of ~(hours, minutes, AM or PM)~:
#+BEGIN_SRC sml
type mytime = int * int * string;
#+END_SRC

#+RESULTS:
: type mytime = int * int * string
: END

Then we can define predicate which determine whether one time of day, in form of
~mytime~, comes before another. The behavior of it should follows
#+BEGIN_SRC sml
(11, 59, "AM") precedes (1, 15, "PM");
#+END_SRC

We can easily implement it:
#+BEGIN_SRC sml
fun isPrecedes((h1, m1, N1):mytime, (h2, m2, N2)) =
    (N1 = "AM" andalso N2 = "PM") orelse (h1 < h2) orelse (m1 < m2)
#+END_SRC

#+RESULTS:
: val isPrecedes = fn : mytime * (int * int * string) -> bool
: END

**** Exercise 2.7
#+BEGIN_SRC sml
type oldEngMoney = int * int * int;
fun oldEngMoneyAdd((po1,s1,pe1), (po2,s2,pe2)) =
    let val amount = ((po1 + po2)*20 + s1 + s2)* 12 + pe1 + pe2
    in (amount div (20 * 12), (amount mod (20 * 12)) div 12, amount mod 12)
    end

fun oldEngNeg(po, s, pe): oldEngMoney = (~po, ~s, ~pe)
fun oldEngMoneySub(money1, money2) = oldEngMoneyAdd(money1, oldEngNeg money2)
#+END_SRC

#+RESULTS:
: type oldEngMoney = int * int * int
: val oldEngMoneyAdd = fn : (int * int * int) * (int * int * int) -> oldEngMoney
: val oldEngNeg = fn : int * int * int -> oldEngMoney
: val oldEngMoneySub = fn : (int * int * int) * (int * int * int) -> oldEngMoney
: END

*** Raising to an integer power
**** Exercise 2.12

#+BEGIN_SRC latex
\begin{align}
  2.0^{29} &= 2.0 \times 2.0^{28} \\
  &= 2.0 \times 4.0^{14} \\
  &= 2.0 \times 16.0^{7} \\
  &= 2.0 \times (16.0 \times 16.0^{6}) \\
  &= 2.0 \times (16.0 \times 256.0^{3}) \\
  &= 2.0 \times (16.0 \times (256.0 \times 256.0^{2})) \\
  &= 2.0 \times (16.0 \times (256.0 \times 65536.0)) \\
  &= 2.0 \times (16.0 \times 16777216.0) \\
  &= 2.0 \times 268435456.0 \\
  &= 536870912.0
\end{align}
#+END_SRC

#+RESULTS:
#+begin_export latex
\begin{align}
2.0^{29} &= 2.0 \times 2.0^{28} \\
&= 2.0 \times 4.0^{14} \\
&= 2.0 \times 16.0^{7} \\
&= 2.0 \times (16.0 \times 16.0^{6}) \\
&= 2.0 \times (16.0 \times 256.0^{3}) \\
&= 2.0 \times (16.0 \times (256.0 \times 256.0^{2})) \\
&= 2.0 \times (16.0 \times (256.0 \times 65536.0)) \\
&= 2.0 \times (16.0 \times 16777216.0) \\
&= 2.0 \times 268435456.0 \\
&= 536870912.0
\end{align}
#+end_export

**** Exercise 2.13
The number of multiplications needed to compute ~power(x,k)~ is the number of
binary digit representing it plus the number of 1s in its binary digit except
the leftmost one.

So at most, the number of multiplications of it is 2 \times \log_{2} k - 1.

**** Exercise 2.14
Because we chose using ~div~ also in odd power reduction case, if we set the
base case as ~k=0~ and maintain the else unchanged, then when it comes to ~k=1~,
it should calculate ~x * x~, which never used for returning value and also the
most expensive multiplication in that process. To avoid it, we should take ~k=1~
as base case.

**** Exercise 2.15
The recursive definition of /F_{n}/ would be like this:
#+BEGIN_SRC sml
fun fib n: int =
    if n < 2 then n
    else fib (n-1) + fib (n-2);
#+END_SRC

In the above definition, we can not distinguish whether it is strict or
call-by-name rule evaluation; both results to exponential time complexity.
On the other hand, the lazy evaluation could help this situation: It could be
thought as memoization; it has same structure as /nextfib/.

So, lazy evaluation big win here.

**** Exercise 2.16
We can prove that the steps needed are less than 2^{n} and greather than
2^{n/2}. As consequence it inherite exponential step complexity.

To compute the exact number of steps needed for /F_{n}/, we need to solve the
linear discrete differential equation:

#+BEGIN_SRC latex
\begin{align}
f_{n} &= f_{n-1} + f_{n-2} + 2 &\text{for }n > 1 \\
f_{n} &= 1 &\text{for }n < 2
\end{align}
#+END_SRC

#+RESULTS:
#+begin_export latex
\begin{align}
f_{n} &= f_{n-1} + f_{n-2} + 2 &\text{for }n > 1 \\
f_{n} &= 1 &\text{for }n < 2
\end{align}
#+end_export


It is worth to solve eagerously; but I've done with in [[github:HyunggyuJang/SICP][SICP]]. So I like to skip
this step.

**** Exercise 2.17
By reduction step, we know that /itfib(n+1, F_{k-1}, F_{k})/ \to
/itfib(n, F_{k}, F_{k+1})/. Based on this, we can reason or observe by
experimenting some examples that /itfib(n,F_{k-1}, F_{k})/ \to
/F_{k+n-1}/. We can prove this fact by induction on n.

**** Exercise 2.18
Code iterative process of following process:
#+BEGIN_SRC sml
fun increase(k,n) = if (k+1)*(k+1) > n then k else k + 1;

fun introot n =
    if n = 0 then 0 else increase(2 * introot(n div 4), n);
#+END_SRC

#+BEGIN_SRC scheme
(define (quaternary n bit)
  (if (= n 0)
      bit
      (quaternary (quotient n 4) (cons (modulo n 4) bit))))

(define (increase root bit number)
  (if (null? bit)
      root
      (let ((next-root (* 2 root))
            (next-number (+ number (car bit)))
            (next-bit (cdr bit)))
        (increase
         (if (> (square(1+ next-root))
                (next-number))
             next-root
             (1+ next-root))
         next-bit
         (* 4 next-number)))))

(define (introot n)
  (increase 0 (quaternary n '()) 0))
#+END_SRC

This is the iterative process of ~introot~. We exploit the fact that ~introot~
is somewhat analogous to ~fast-expt~; whereas ~fast-expt~ look only the one bit
of number--represented by binary number, it need to look more than
that--sequence of quaternary number.

**** Exercise 2.19
We can code this algorithm:
#+BEGIN_SRC sml
fun gcd(m,n) =
    if m=n then m
    else if m mod 2 = 0 andalso n mod 2 = 0
    then 2 * gcd(m div 2, n div 2)
    else if m mod 2 = 1 andalso n mod 2 = 1
    then if m < n then gcd((n-m) div 2, m) else gcd((m-n) div 2, n)
    else if m mod 2 = 0
    then gcd(m div 2, n)
    else gcd(n div 2, m);
#+END_SRC

To compare with Euclid's Algorithm, we consider the following example:
~gcd(5499, 6812)~
- In Euclid's Algorithm, as did in text book, it require 6 steps.
- On the other hand, the given algorithm we should take 13 steps for evaluating it.


Can we prove that Euclid's Algorithm is always more efficient than given? The
given algorithm quite subtle so I think it is not easy to prove in this point.
After we gathered right instruments, we should try it not now.

**** Exercise 2.20
If we decide to nest ~itfib~ in ~fib~, then every call of fib should redefine
~itfib~ which is obvious overhead; in ~sqroot~ function, ~findroot~ depends on
the parameter of ~sqroot~, ~a~ and ~acc~ which does not change over the
iteration process, whereas ~itfib~ alter its parameters during iteration. So it
is ideal to define ~itfib~ using ~local~.
**** Exercise 2.21
Now I've got it what the statement intended: The point was ~introot~ maps /n/ to
its integer square root /k/ with the difference /n - k^{2}/; namely /n/ \to
/(k, n - k^{2}/ with /eliminating squaring operation/. Let's put the base case
first; and then put all the pieces together.

We can start with this:
#+BEGIN_SRC sml
fun introotpair n =
    if n < 4 then (1, n - 1)    (* base case *)
    else
        let val (i, dif) = introotpair (n div 4) (* wishful thinking assume we'v got *)
...
#+END_SRC

Then from the recursive step, we need to check
- whether n - (2i + 1)^{2} < 0; if it is then 2i would be integer root of n,
  otherwise 2i + 1.


Then we should maps this /2i/ and /n - (2i + 1)^{2} < 0/ in terms of ~i~,
~dif~ and /n/, where ~dif~ is m - i^{2}. We can solve this by observing that
- n - (2i + 1)^{2} = n - 4m + 4(m - i^{2}) - 4i - 1 = n - 4m + 4 ~dif~ - 4 ~i~ - 1
- n - 4m = ~n - 4 (n div 4)~ = ~n mod 4~


We converted as wanted. By putting together, we get
#+BEGIN_SRC sml
fun introotpair n =
    if n < 4 then (1, n - 1)    (* base case *)
    else
        let val (i, dif) = introotpair (n div 4) (* wishful thinking assume we've got *)
        in
            if (n mod 4) + 4 * dif - 4 * i - 1 < 0
            then (2*i, (n mod 4) + 4 * dif)
            else (2*i + 1, (n mod 4) + 4 * dif - 4 * i - 1)
        end;
#+END_SRC

Removing the duplicative evaluation, we get
#+BEGIN_SRC sml
fun introotpair n =
    if n < 4 then (1, n - 1)    (* base case *)
    else
        let val (i, dif) = introotpair (n div 4) (* wishful thinking assume we'v got *)
            val (k_1, dif_1) = (2*i, (n mod 4) + 4 * dif)
            val (k_2, dif_2) = (k_1 + 1, dif_1 - 2 * k_1 - 1)
        in
            if dif_2 < 0
            then (k_1, dif_1)
            else (k_2, dif_2)
        end;
#+END_SRC

*** Simultaneous declarations
In ML, the function definition capture the environment when it defined; so it
need special syntax for mutual recursion:
#+BEGIN_SRC sml
fun pos d = neg(d - 2.0) + 1.0/d
and neg d = if d>0.0 then pos(d-2.0) - 1.0/d
                     else 0.0;
#+END_SRC

Whereas, in scheme procedure definition did not bind its free variable when it
defined--it is called erroneously /closure/ property; there is no concept like
mutual recursion or special syntax for it, the above function definition can be
achieved likely:
#+BEGIN_SRC scheme
(define (pos d)
  (+ (neg (- d 2.0))
     (/ 1.0 d)))
(define (neg d)
  (if (> d 0)
      (- (pos (- d 2.0))
         (/ 1.0 d))
      0.0))
#+END_SRC
**** Exercise 2.22
It would swap the values because the left hand side of declaration only rewrite
its value after evaluated right hand side expressions.
**** Exercise 2.23
Let's code it directly: for the summation notation, declare auxilary function
named ~sum_P~. As both function are mutually dependent, we should use
simultaneous declaration:
#+BEGIN_SRC sml
fun P n =
    if n = 1 then 1
    else 1 + sum_P (n-1)
and sum_P n =
    if n = 0 then 0
    else P n + sum_P (n-1);
#+END_SRC
As this process evolve interwindly, we can prove that its step complextity is
exponential[fn:1] whereas space complextity is linear with repect to ~n~.
Also, we can optain the closed form of its return value, 2^{n-1} by solving
discrete linear differential equation with repect to ~sum_P~. In turns, this
closed form can be calculated in \log_{2} n complexity of steps by using ~fast-expt~.
**** Exercise 2.24
We can exploit the fact that ~fun~ is syntactic sugar for ~val~:
#+BEGIN_SRC sml
structure Real : ARITH =
struct
type t = real;
val zero = 0.0;
val sum : t * t -> t= op+;
val diff : t * t -> t= op-;
val prod : t * t -> t= op*;
val quo = op/;
end;
#+END_SRC
**** Exercise 2.25
Rational number arithmetic:
#+BEGIN_SRC sml
structure Rational : ARITH =
struct
type t = int * int;
val zero = (0, 1);
fun make_rat (n',d') =
    let val g = gcd(n', d')
        val (n, d) = (n' div g, d' div g)
    in
        if (n > 0 andalso d < 0) (* make denominator positive *)
               (* orelse (n < 0 andalso d < 0) *)
               (* ↑ this is can not happen by dividing gcd both side *)
        then (~n, ~d)
        else (n, d)
    end;
fun sum ((n,d), (n',d')) = make_rat(n * d' + n' * d, d * d');
fun neg (n,d) : t = (~n, d);
fun diff (r, r') = sum(r, neg r');
fun prod ((n,d), (n',d')) = make_rat(n*n', d*d');
fun recip (n, d) : t = (d, n);
fun quo (r, r') = prod (r, recip r');
end
#+END_SRC

As I commented, in the ~make_rat~ function definition, the ~orelse~ clause never
be evaluated as ~true~. So I've omitted it. At first glimpse it is not obvious
why; so maybe I shouldn't omit it for clarity of code. This is one's preference;
I like it.
**** Exercise 2.26
From the ~if n=1 then curr~ we (compiler) can infer that ~n~ is type of ~int~
and also that ~curr~ has ~int~ type by type constraints of ~itfib~. As
consequence, by ~prev + curr~ the ~prev~ also should have ~int~ type, ~itfib~'s
type are determined as ~int * int * int -> int~.
**** Exercise 2.27
Type check the following function declaration:
#+BEGIN_SRC sml
fun f (k,m) = if k=0 then 1 else f(k-1);
#+END_SRC

#+RESULTS:
: stdIn:21.34-21.40 Error: operator and operand do not agree [overload conflict]
: operator domain: [- ty] * 'Z
: operand:         [- ty]
: in expression:
: f (k - 1)
: END

By the type checking rule for conditional expression, ~f(k-1)~ has ~int~ type.
As ~k=0~ implies ~k~ is integer, ~f(k-1)~ means that it called with argument
type ~int~; but the function declaration denotes ~f~ should take pair as its
argument. So it end up with compilation error.
** Chapter 3
*** Testing lists and taking them apart
**** Exercise 3.1
We can code directly:
#+BEGIN_SRC sml
fun maxl l : int  =
    if null (tl l) then hd l
    else
        let val m = hd l
            val n = hd (tl l)
            val ntl = tl (tl l)
        in
            if m > n then maxl (m :: ntl)
            else maxl (n :: ntl)
        end;
#+END_SRC
**** Exercise 3.2
Using pattern matching, it can defined concisely:
#+BEGIN_SRC sml
fun last [e] = e
  | last (_ :: es) = last es;
#+END_SRC
**** Exercise 3.3
#+BEGIN_SRC sml
fun take ([], _) = []
  | take (x::xs, i) =
    if i > 0 then x :: take (xs, i - 1)
    else [];

fun drop ([], _) = []
  | drop (x::xs, i) =
    if i > 0 then drop (xs, i - 1)
    else x::xs;
#+END_SRC
- When i > /length(l)/ then, by the first clause of pattern matching, ~take~
  would return /l/; whereas ~drop~ return ~[]~.
- And if i < 0 then, ~take~ returns ~[]~ and ~drop~ return /l/ by second clause
  of those.
**** Exercise 3.4
#+BEGIN_SRC sml
fun nth (x::xs, n) =
    if n > 0 then nth (xs, n - 1)
    else x;
#+END_SRC
**** Exercise 3.5
All we needed to do is append given case explicitly:
#+BEGIN_SRC sml
infixr 5 @;
fun ([] @ ys) = ys
  | (xs @ [])  = xs
  | ((x::xs) @ ys) = x :: (xs @ ys);
#+END_SRC
**** Exercise 3.6
It will complain about the type inconsistence; ~@~ expect to take 2 list with
the same type by the last clause of its definition, the ~x~, element type of list
of ~xs~, is not the case.
*** Making change
**** Exercise 3.11
We can achieve this using the structure of ~change~
#+BEGIN_SRC sml
local
    val romans = ["M", "D", "C", "L", "X", "V", "I"];
    val rNumers = [1000, 500, 100, 50, 10, 5, 1];
    val romanPairs = ListPair.zip (romans, rNumers);
    fun romanNumeral (romanvals, 0) = ""
      | romanNumeral ((r,v) :: romanvals, amount) =
        if amount < v then romanNumeral (romanvals, amount)
        else r ^ romanNumeral ((r,v) :: romanvals, amount - v);
in
fun toRomanVerbose (amount) = romanNumeral(romanPairs, amount);
end;

(* or *)

local
    val romans = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];
    val rNumers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
    val romanPairs = ListPair.zip (romans, rNumers);
    fun romanNumeral (romanvals, 0) = ""
      | romanNumeral ((r,v) :: romanvals, amount) =
        if amount < v then romanNumeral (romanvals, amount)
        else r ^ romanNumeral ((r,v) :: romanvals, amount - v);
in
fun toRomanConcise (amount) = romanNumeral(romanPairs, amount);
end;
#+END_SRC

Here we implemented the two version of converting to Roman numerals.
**** Exercise 3.12
If it were increasing order, by the definition of ~change~, the result is same
as if we gave the ~coinvals~ only includes the first coin value in the
~coinvals~ in increasing order; e.g. if ~coinvals = [1, 5, 10, 25]~ then the
~amount~ get converted to sequence of 1s.
**** Exercise 3.13
There are several possibilities in implementing this:
- By changing the coinvals to purse, which can contains coins duplicately:
  #+BEGIN_SRC sml
fun allChangeWithPurse (coins, purse, 0) = [coins]
  | allChangeWithPurse (coins, [], amount) = []
  | allChangeWithPurse (coins, c :: purse, amount) =
    if amount < 0 then []
    else allChangeWithPurse(c :: coins, purse, amount - c) @
         allChangeWithPurse(coins, purse, amount);
  #+END_SRC
  Unfortunately this not work; the result has some duplicative entries.
- We can revise this by considering purse as ListPair that contains the pair of coin
  values and number of that coins:
  #+BEGIN_SRC sml
fun allChangeWithPurse (coins, purse, 0) = [coins]
  | allChangeWithPurse (coins, [], amount) = []
  | allChangeWithPurse (coins, (c,n) :: purse, amount) =
    if amount < 0 then []
    else if n = 0 then allChangeWithPurse(coins, purse, amount)
    else allChangeWithPurse(c :: coins, (c, n - 1) :: purse, amount - c) @
         allChangeWithPurse(coins, purse, amount);
  #+END_SRC
**** Exercise 3.14
We can solve this problem by relying on our old friend John; John did implement
the function ~allChange~ with the following
specification:
- When we hand over the four parameters of it--~coins~, ~coinvals~, ~amount~,
  ~results~, then it returns contains all the answers that can be obtained with
  ~coins~ and ~coinvals~ as well as all contents of ~results~.
- The way to merge all the answers with ~results~ is other than ~append~.


With this armamentarium, we can tackle the recursive case:
#+BEGIN_SRC sml
  | allChange (coins, c :: coinvals, amount, results) =
    if amount < 0 then []
    else allChange(c :: coins,
                   c :: coinvals,
                   amount - c,
                   allChange(coins, coinvals, amount, results));
#+END_SRC

By applying repeatedly this, we end up with base case:
#+BEGIN_SRC sml
fun allChange (coins, coinvals, 0, results) = coins :: results
  | allChange (coins, [], amount, results) = results
#+END_SRC
Here we used ~::~ for combining the answer with ~results~ for specification.

Then we complete the function:
#+BEGIN_SRC sml
fun allChange (coins, coinvals, 0, results) = coins :: results
  | allChange (coins, [], amount, results) = results
  | allChange (coins, c :: coinvals, amount, results) =
    if amount < 0 then []
    else allChange(c :: coins,
                   c :: coinvals,
                   amount - c,
                   allChange(coins, coinvals, amount, results));
#+END_SRC

The most significant difference between this one and previous one is that the
original can be parallelized in the recursive case, whereas above one is
sequential--must wait until the second subproblem return; this observation also
means the previous construct intermediate list for appending them (in parallel),
on the otherwise in this one there are no list construction other than return value.

As consequence, present version has deeper recursive process than previous where
instead the intermediate lists costs more than this one.
*** Binary arithmetic
Binary addition and multiplication are defined here for lists of zeros and ones.

**** Addition.
Let's first inspect the rules that govern binary sum; do binary sum of 11 + 30 =
41: 11110 + 1011 = 101001.

We can elicit the rules:
- Addition works from right to left.
- At each position, the two bits plus any carry give a sum bit.
- Any carry propagate as addition works, i.e. from right to left.


To implement those rules in list, we should consider list as representing the
reverse order of binary numbers; as list can be easily accessed with their head,
whereas the last item costs a lot and hard to manage.

Using observations so far, let's try out. As usual we rely on wishful thinking.
#+BEGIN_SRC sml
  | binsum (c, p :: ps, q :: qs) = ((c + p + q) mod 2) :: binsum((c + p + q) div 2, ps, qs)
#+END_SRC

Then we can reach the base case by applying the recursive process repeatedly:
#+BEGIN_SRC sml
fun binsum (c, [], qs) = ??
  | binsum (c, ps, []) = ??
#+END_SRC

Either of this can be thought as /propagating carry along with one binary
number/. It deserve to be assigned its own name. ~bincarry~ will do. Here also
we start with recursive case. Let's do some experiment with this. What if ~c~
equals zero? we just need return the ~ps~. How about ~c~ equals one? It will
depend on the ~ps~; this would be the recursive case. Playing with some examples
we can deduce following rules:
#+BEGIN_SRC sml
fun bincarry (0, ps) = ps
  | bincarry (1, []) = [1]
  | bincarry (1, p :: ps) = (1-p) :: bincarry (p, ps);
#+END_SRC

We captured the recursive case succinctly: ~(1 + p) mod 2~ is same as ~1-p~ and
also ~(1 + p) div 2~ same as ~p~.

Then we can complete ~binsum~:
#+BEGIN_SRC sml
fun binsum (c, [], qs) = bincarry (c, qs)
  | binsum (c, ps, []) = bincarry (c, ps)
  | binsum (c, p :: ps, q :: qs) = ((c + p + q) mod 2) :: binsum((c + p + q) div 2, ps, qs);
#+END_SRC
**** Multiplication.
We can deduce the multiplication rules of binary number that is analogous to
sum:
#+BEGIN_SRC sml
  | binprod (0::ps, qs) = 0::binprod(ps, qs)
  | binprod (1::ps, qs) = binsum(0, qs, 0::binprod(ps, qs))
#+END_SRC

Then we end up with base case:
#+BEGIN_SRC sml
fun binprod ([], _) = []
#+END_SRC

As the whole
#+BEGIN_SRC sml
fun binprod ([], _) = []
  | binprod (0::ps, qs) = 0::binprod(ps, qs)
  | binprod (1::ps, qs) = binsum(0, qs, 0::binprod(ps, qs));
#+END_SRC
**** A structure for binary arithmetic.
We can capture the binary arithmetic system using ~structure~ as we learned in
section 2.22.
#+BEGIN_SRC sml
structure Bin =
struct
fun carry (0, ps) = ps
  | carry (1, []) = [1]
  | carry (1, p :: ps) = (1-p) :: carry (p, ps);

fun sum (c, [], qs) = carry (c, qs)
  | sum (c, ps, []) = carry (c, ps)
  | sum (c, p :: ps, q :: qs) = ((c + p + q) mod 2) :: sum((c + p + q) div 2, ps, qs);

fun prod ([], _) = []
  | prod (0::ps, qs) = 0::prod(ps, qs)
  | prod (1::ps, qs) = sum(0, qs, 0::prod(ps, qs));
end
#+END_SRC

#+RESULTS:
#+begin_example
stdIn:41.5-43.51 Warning: match nonexhaustive
(nil,_) => ...
(0 :: ps,qs) => ...
(1 :: ps,qs) => ...

stdIn:33.5-35.48 Warning: match nonexhaustive
(0,ps) => ...
(1,nil) => ...
(1,p :: ps) => ...

structure Bin :
sig
val carry : int * int list -> int list
val sum : int * int list * int list -> int list
val prod : int list * int list -> int list
end
END
#+end_example
**** Exercise 3.15
We can convert the 1 and 0s to boolean values using truth table. As consequence
we don't need to use the arithmetic operations.
#+BEGIN_SRC sml
structure Bin =
struct
fun carry (false, ps) = ps
  | carry (true, []) = [true]
  | carry (true, p :: ps) = (not p) :: carry (p, ps);

fun xor (b, b') = (b andalso not b') orelse (not b andalso b');

fun sum (c, [], qs) = carry (c, qs)
  | sum (c, ps, []) = carry (c, ps)
  | sum (false, p :: ps, q :: qs) = xor (p, q) :: sum(p andalso q, ps, qs)
  | sum (true, p :: ps, q :: qs) = (not xor (p, q)) :: sum(p orelse q, ps, qs);

fun prod ([], _) = []
  | prod (false::ps, qs) = false::prod(ps, qs)
  | prod (true::ps, qs) = sum(false, qs, false::prod(ps, qs));
end;
#+END_SRC
**** Exercise 3.16
First we should define what the binary division means; let we define it as
/binary version of integer division/. To deduce the rules for it, inspect the
common pattern of integer division: Play with 41 / 3, and then do the bianry
version--101001 / 11. Then we can elicit the how to rules:
#+BEGIN_SRC sml
fun quorem' (ps, qs, n, quot) =
    if n < 0 then (quot, ps)
    else let val qs' = zeroPed (qs, n)
             val rem = diff (ps, qs')
         in if (isNeg rem) then
                if (null quot) then quorem' (ps, qs, n-1,quot)
                else quorem' (ps, qs, n-1 0 :: quot)
            else quorem' (ps, qs, n-1, 1 :: quot)
         end;
#+END_SRC
As we learned from elementary school, here we also obtained quotient and
remainder at the same time. Also note that we didn't implemented the auxilary
functions--isNeg, zeroPed, diff; we just used wishful thinking. After implemnt
it, we can call this with appropriate initial condition:
#+BEGIN_SRC sml
fun quorem (ps, qs) =
    let val lp = length ps
        val lq = length qs
    in if lp < lq then (zero, ps)
       else (quorem' (ps, qs, lp - lq, []))
    end;
#+END_SRC

Since we coded our elementary knowledge into SML, all we have to do is implement
the auxilary functions.

***** ~diff~
Analogous to ~quorem~, we can code the ~diff~ function directly:
#+BEGIN_SRC sml
local
    fun diff_ (b, [], qs) = neg (carry (b, qs))
      | diff_ (b, ps, []) = borrow (b, ps)
      | diff_ (b, p :: ps, q :: qs) = ((p - q - b) mod 2) :: diff_(~((p - q - b) div 2), ps, qs);
in fun diff (ps, qs) = diff_ (0, ps, qs);
end;
#+END_SRC

Here we used ~b~ for borrow flag, i.e. if ~b~ equals to 1 then 1 bit borrowed
from this postion at lower postion.

Then borrow:
#+BEGIN_SRC sml
fun borrow (0, ps) = ps
  | borrow (1, []) = [~1]
  | borrow (1, p :: ps) = (1-p) :: borrow ((1-p), ps);
#+END_SRC

Negation of binary number:
#+BEGIN_SRC sml
fun neg [] = [] : int list
  | neg (p :: ps) = ~p :: (neg ps);
#+END_SRC
***** ~isNeg~
By the implementation of diff we can check whether it is negative number by
inspecting last element:
#+BEGIN_SRC sml
fun isNeg [~1] = true
  | isNeg [_] = false
  | isNeg (q :: qs) = isNeg qs;
#+END_SRC
***** ~zeroPed~
It shift the binary number ~n~ times:
#+BEGIN_SRC sml
fun zeroPed (qs, 0) = qs
  | zeroPed (qs, n) = 0 :: zeroPed (qs, n-1);
#+END_SRC
***** ~quo~
We get what we wanted using ~quorem~:
#+BEGIN_SRC sml
fun quo (ps, qs) = #1 (quorem (ps, qs));
#+END_SRC
***** ~rem~
It is by-product of ~quorem~:
#+BEGIN_SRC sml
local fun stripZeros (b::[0]) = [b]
        | stripZeros (b::[x]) = b::[x]
        | stripZeros (b :: b1 :: b2 :: bs) = stripZeros (b :: (stripZeros (b1 :: b2 :: bs)));
in fun rem (ps, qs) = stripZeros (#2 (quorem (ps, qs)));
end;
#+END_SRC

**** Exercise 3.17
It is straight forward to do this:
#+BEGIN_SRC sml
structure Bin : ARITH =
struct
type t = int list

val zero = [0];

fun carry (0, ps) = ps
  | carry (1, []) = [1]
  | carry (1, p :: ps) = (1-p) :: carry (p, ps);

local
    fun sum_ (c, [], qs) = carry (c, qs)
      | sum_ (c, ps, []) = carry (c, ps)
      | sum_ (c, p :: ps, q :: qs) = ((c + p + q) mod 2) :: sum_((c + p + q) div 2, ps, qs);
in fun sum (ps, qs) = sum_ (0, ps, qs);
end;

fun neg [] = [] : int list
  | neg (p :: ps) = ~p :: (neg ps);

fun borrow (0, ps) = ps
  | borrow (1, []) = [~1]
  | borrow (1, p :: ps) = (1-p) :: borrow ((1-p), ps);

local
    fun diff_ (b, [], qs) = neg (carry (b, qs))
      | diff_ (b, ps, []) = borrow (b, ps)
      | diff_ (b, p :: ps, q :: qs) = ((p - q - b) mod 2) :: diff_(~((p - q - b) div 2), ps, qs);
in fun diff (ps, qs) = diff_ (0, ps, qs);
end;

fun prod ([], _) = []
  | prod (0::ps, qs) = 0::prod(ps, qs)
  | prod (1::ps, qs) = sum(qs, 0::prod(ps, qs));


local
fun zeroPed (qs, 0) = qs
  | zeroPed (qs, n) = 0 :: zeroPed (qs, n-1);

fun isNeg [~1] = true
  | isNeg [_] = false
  | isNeg (q :: qs) = isNeg qs;

fun quorem_ (ps, qs, n, quot) =
    if n < 0 then (quot, ps)
    else let val qs' = zeroPed (qs, n)
             val rem = diff (ps, qs')
         in if (isNeg rem) then
                if (null quot) then quorem_ (ps, qs, n-1, quot)
                else quorem_ (ps, qs, n-1, 0::quot)
            else quorem_ (rem, qs, n-1, 1::quot)
         end;
in fun quorem (ps, qs) =
       let val lp = length ps
           val lq = length qs
       in if lp < lq then (zero, ps)
          else quorem_ (ps, qs, lp - lq, [])
       end;
end

fun quo (ps, qs) = #1 (quorem (ps, qs));

local fun stripZeros (b::[0]) = [b]
        | stripZeros (b::[x]) = b::[x]
        | stripZeros (b :: b1 :: b2 :: bs) = stripZeros (b :: (stripZeros (b1 :: b2 :: bs)));
in fun rem (ps, qs) = stripZeros (#2 (quorem (ps, qs)));
end;
end;
#+END_SRC
**** Exercise 3.18
To convert decimal numbers to binary number, first we should experiment with
some example: 41 \to 11001.

All we need to do is accumulate the sequence of remainders when we repeatedly
divid the decimal number with 2.

These are quite straightforward implementation:
#+BEGIN_SRC sml
(* →binary *)
fun toBinary 0 = []
  | toBinary n = (n mod 2) :: (toBinary (n div 2));

(* →decimal *)
fun toDecimal [] = 0
  | toDecimal (b::bs) = b + 2 * (toDecimal bs);
#+END_SRC

* Footnotes

[fn:1] By comparing with the recursive vesion of ~fib~.
